{1,
{4,
{"Vanessa.Add",1,0,"",""},
{3,
{"xdd",1,0,"",""},
{0,
{"Модуль теста xdd",0,0,"Модуль","#Область ОписаниеПеременных

Перем КонтекстЯдра;

// Объявляем переменные - указатели на обработки-плагины

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Из-за технических особенностей клиент-серверной работы в 1С инициализация запускается 3 раза
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	Если КонтекстЯдра <> Неопределено Тогда
		Возврат; // Инициализация теста уже выполнялась
	КонецЕсли;
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	// Подключение плагинов
	//Плагин<Ctrl+T>
	
	// Если нужна инициализация плагинов, то делаем это тут, например:
	// ЗапускТестовДляПользователей.Инициализация(КонтекстЯдраПараметр);
	// Помним что Инициализация запустится 3 раза!
	// Поэтому тяжелые операции из инициализации вашего плагина лучше выполнять перед запуском теста
	
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	НаборТестов.Добавить(""Проверка_ИмяФункции1"");
КонецПроцедуры

// Выполняется перед каждым тестом из набора этой обработки
Процедура ПередЗапускомТеста() Экспорт
	НачатьТранзакцию();
	
	// Готовим базу к выполнения теста: создаем тестовые данные, настраиваем константы и т.д.
	
КонецПроцедуры

// Выполняется после каждого теста из набора этой обработки
Процедура ПослеЗапускаТеста() Экспорт
	Если ТранзакцияАктивна() Тогда
		// Здесь все наши изменения тестовой базы отменятся
	    ОтменитьТранзакцию();
	КонецЕсли;
КонецПроцедуры

#Область БлокЮнитТестов

Процедура Проверка_ИмяФункции1() Экспорт
	
	// Тело теста
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
"}
},
{0,
{"Подключение плагина",0,0,"П[лагины]","<?""Выберите плагин"", ВыборВарианта, 
""LoadSettings"", 					""LoadSettings = КонтекстЯдра.Плагин(\""LoadSettings\"");"",
""Аллюр2Отчет"", 						""Аллюр2Отчет = КонтекстЯдра.Плагин(\""Аллюр2Отчет\"");"", 
""БазовыеУтверждения"", 				""БазовыеУтверждения = КонтекстЯдра.Плагин(\""БазовыеУтверждения\"");"", 
""ВременныеФайлы"", 					""ВременныеФайлы = КонтекстЯдра.Плагин(\""ВременныеФайлы\"");""
""ВыводВЛогФайл"", 					""ВыводВЛогФайл = КонтекстЯдра.Плагин(\""ВыводВЛогФайл\"");"", 
""ГенераторОтчетаAllureXML"", 		""ГенераторОтчетаAllureXML = КонтекстЯдра.Плагин(\""ГенераторОтчетаAllureXML\"");"", 
""ГенераторОтчетаAllureXMLВерсия2"", 	""ГенераторОтчетаAllureXMLВерсия2 = КонтекстЯдра.Плагин(\""ГенераторОтчетаAllureXMLВерсия2\"");"", 
""ГенераторОтчетаJUnitXML"", 			""ГенераторОтчетаJUnitXML = КонтекстЯдра.Плагин(\""ГенераторОтчетаJUnitXML\"");"", 
""ГенераторОтчетаJUnitXML_TFS"", 		""ГенераторОтчетаJUnitXML_TFS = КонтекстЯдра.Плагин(\""ГенераторОтчетаJUnitXML_TFS\"");"", 
""ГенераторОтчетаMXL"", 				""ГенераторОтчетаMXL = КонтекстЯдра.Плагин(\""ГенераторОтчетаMXL\"");"", 
""ГенерацияКодаВозврата"", 			""ГенерацияКодаВозврата = КонтекстЯдра.Плагин(\""ГенерацияКодаВозврата\"");"", 
""Данные"", 							""Данные = КонтекстЯдра.Плагин(\""Данные\"");"", 
""ДвиженияДокумента"", 				""ДвиженияДокумента = КонтекстЯдра.Плагин(\""ДвиженияДокумента\"");"", 
""ЗагрузчикИзПодсистемКонфигурации"", ""ЗагрузчикИзПодсистемКонфигурации = КонтекстЯдра.Плагин(\""ЗагрузчикИзПодсистемКонфигурации\"");"", 
""ЗагрузчикКаталога"", 				""ЗагрузчикКаталога = КонтекстЯдра.Плагин(\""ЗагрузчикКаталога\"");"", 
""ЗагрузчикПользовательскихНастроек"",""ЗагрузчикПользовательскихНастроек = КонтекстЯдра.Плагин(\""ЗагрузчикПользовательскихНастроек\"");"", 
""ЗагрузчикФайла"", 					""ЗагрузчикФайла = КонтекстЯдра.Плагин(\""ЗагрузчикФайла\"");"", 
""ЗапросыИзБД"", 						""ЗапросыИзБД = КонтекстЯдра.Плагин(\""ЗапросыИзБД\"");"", 
""ЗапускТестовДляПользователей"", 	""ЗапускТестовДляПользователей = КонтекстЯдра.Плагин(\""ЗапускТестовДляПользователей\"");"", 
""Информатор"", 						""Информатор = КонтекстЯдра.Плагин(\""Информатор\"");"", 
""ИтераторМетаданных"", 				""ИтераторМетаданных = КонтекстЯдра.Плагин(\""ИтераторМетаданных\"");"", 
""КомандныйФайл"", 					""КомандныйФайл = КонтекстЯдра.Плагин(\""КомандныйФайл\"");"", 
""Настройки"", 						""Настройки = КонтекстЯдра.Плагин(\""Настройки\"");"", 
""ПарсерКоманднойСтроки"", 			""ПарсерКоманднойСтроки = КонтекстЯдра.Плагин(\""ПарсерКоманднойСтроки\"");"", 
""Пользователи"", 					""Пользователи = КонтекстЯдра.Плагин(\""Пользователи\"");"", 
""ПостроительДереваТестов"", 			""ПостроительДереваТестов = КонтекстЯдра.Плагин(\""ПостроительДереваТестов\"");"", 
""ПроверкаОрфографии"", 				""ПроверкаОрфографии = КонтекстЯдра.Плагин(\""ПроверкаОрфографии\"");"", 
""РегулярныеВыражения"", 				""РегулярныеВыражения = КонтекстЯдра.Плагин(\""РегулярныеВыражения\"");"", 
""СериализаторMXL"", 					""СериализаторMXL = КонтекстЯдра.Плагин(\""СериализаторMXL\"");"", 
""СтроковыеУтилиты"", 				""СтроковыеУтилиты = КонтекстЯдра.Плагин(\""СтроковыеУтилиты\"");"", 
""ТестКлиенты"", 						""ТестКлиенты = КонтекстЯдра.Плагин(\""ТестКлиенты\"");"", 
""УправлениеПриложениями"", 			""УправлениеПриложениями = КонтекстЯдра.Плагин(\""УправлениеПриложениями\"");"", 
""УтвержденияBDD"", 					""УтвержденияBDD = КонтекстЯдра.Плагин(\""УтвержденияBDD\"");"", 
""УтвержденияПроверкаТаблиц"", 		""УтвержденияПроверкаТаблиц = КонтекстЯдра.Плагин(\""УтвержденияПроверкаТаблиц\"");"", 
""Файлы"", 							""Файлы = КонтекстЯдра.Плагин(\""Файлы\"");"">
"}
},
{2,
{"Плагины",1,0,"",""},
{4,
{"УтвержденияПроверкаТаблиц",1,0,"",""},
{0,
{"ВТаблицеЕстьСтрока",0,0,"УтвержденияПроверкаТаблиц.","УтвержденияПроверкаТаблиц.ВТаблицеЕстьСтрока(Таблица, ПредставлениеСтроки)"}
},
{0,
{"ПолучитьТаблицуЗначенийИзТабличногоДокумента",0,0,"УтвержденияПроверкаТаблиц.","УтвержденияПроверкаТаблиц.ПолучитьТаблицуЗначенийИзТабличногоДокумента(ТабличныйДокумент, 
	УчитыватьТолькоВидимыеКолонки = Ложь, УчитыватьТолькоВидимыеСтроки = Ложь)"}
},
{0,
{"ПроверитьРавенствоТаблиц",0,0,"УтвержденияПроверкаТаблиц.","УтвержденияПроверкаТаблиц.ПроверитьРавенствоТаблиц(ТаблицаОжиданий, ТаблицаРезультатов, ДопСообщениеОшибки = """", 
	ДопПараметры = Неопределено)"}
},
{0,
{"ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям",0,0,"УтвержденияПроверкаТаблиц.","УтвержденияПроверкаТаблиц.ПроверитьРавенствоТабличныхДокументовТолькоПоЗначениям(ТаблицаОжиданий, ТаблицаРезультатов, 
	УчитыватьТолькоВидимыеКолонкиИлиДопСообщениеОшибки = Ложь, УчитыватьТолькоВидимыеСтрокиИлиДопСообщениеОшибки = Ложь,
	ДопСообщениеОшибки = """", ДопПараметры = Неопределено)"}
}
},
{22,
{"БазовыеУтверждения",1,0,"",""},
{0,
{"ПроверитьИстину",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьИстину(_Истина, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьЛожь",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьЛожь(_Истина, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьРавенство",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьРавенство(_1, _2, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьНеРавенство",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьНеРавенство(_1, _2, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьДату",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьДату(_Дата, _Период, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьРавенствоДатСТочностью2Секунды",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьРавенствоДатСТочностью2Секунды(_Дата, _Дата2, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьБольше",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьБольше(_Больше, _Меньше, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьБольшеИлиРавно",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьБольшеИлиРавно(_Больше, _Меньше, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьМеньше",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьМеньше(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = """")"}
},
{0,
{"ПроверитьМеньшеИлиРавно",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьМеньшеИлиРавно(проверяемоеЗначение1, проверяемоеЗначение2, СообщениеОбОшибке = """")"}
},
{0,
{"ПроверитьЗаполненность",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьНеЗаполненность",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьНеЗаполненность(ПроверяемоеЗначение, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьТип",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьТип(Значение, ТипИлиИмяТипа, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьВхождение",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьВхождение(Строка, ПодстрокаПоиска, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьВхождениеВКоллекцию",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьВхождениеВКоллекцию(Элемент, Коллекция, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьНаличиеОбъектаИБ",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьНаличиеОбъектаИБ(Ссылка, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьВалидностьЗапросаСКД",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьВалидностьЗапросаСКД(ТекстЗапроса, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьВыполнилось",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьВыполнилось(СтрокаАлгоритм, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьНеВыполнилось",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьНеВыполнилось(СтрокаАлгоритм, ОжидаемоеОписаниеОшибки = Неопределено, Знач ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьМетодВыполнился",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьМетодВыполнился(Объект, ИмяМетода, Параметры = Неопределено, ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьМетодНеВыполнился",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьМетодНеВыполнился(Объект, ИмяМетода, Параметры = Неопределено, ОжидаемоеОписаниеОшибки = """", ДопСообщениеОшибки = """")"}
},
{0,
{"ПроверитьРавенствоФайлов",0,0,"БазовыеУтверждения.","БазовыеУтверждения.ПроверитьРавенствоФайлов(ПутьФайла1, ПутьФайла2, ДопСообщениеОшибки = """", ПарамСравнениеФайлов = Неопределено, ПоказатьРазличия = Ложь)"}
}
}
}
},
{1,
{"bdd",1,0,"",""},
{0,
{"Модуль шага bdd",0,0,"Модуль","///////////////////////////////////////////////////
//Служебная часть
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-ADD
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-ADD.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;

	ВсеТесты = Новый Массив;

	// описание шагов
	// пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПредставлениеТеста, ОписаниеШага, ТипШагаДляОписания, ТипШагаВДереве);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЗагружаюМакетИСохраняюДанныеИзМакетаВПеременную(Парам01,Парам02)"",""ЯЗагружаюМакетИСохраняюДанныеИзМакетаВПеременную"",""И я загружаю макет """"Макет"""" и сохраняю данные из макета в переменную """"ДанныеИзМакета"""""",""Создает данные из макета MXL, полученного через плагин ГенераторДанных, и помещает загруженные данные в переменную контекста"", ""Данные.Макеты"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЗагружаюМакет(Парам01)"",""ЯЗагружаюМакет"",""И я загружаю макет """"Макеты\ИмяФайлаМакета"""""",""Загружает данные из макета MXL, полученного через плагин ГенераторДанных. Как и в соседних шага, макет может располагаться в каталоге проекта и можно указать путь относительно каталога проекта. Можно не указывать расширение mxl. Пример - 'Макеты\ИмяФайлаМакета'"", ""Данные.Макеты"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""СуществуетМакет(Парам01)"",""СуществуетМакет"",""И существует макет """"ТысячаЭлементовСправочника1"""""",""Проверяет наличие макета"", ""Данные.Макеты"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯСоздаюFixturesПоМакету(Парам01)"",""ЯСоздаюFixturesПоМакету"",""Загружает данные из макета MXL, полученного через плагин ГенераторДанных"", """");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯЗагружаюМакетСПеременными(Парам01,ТабПарам)"",""ЯЗагружаюМакетСПеременными"",""И я загружаю макет """"Макет1"""" с переменными:"" + Символы.ПС + ""	| ИмяПеременнойИзМакета | НовоеНазваниеПеременнойВКонтексте |"" + Символы.ПС + ""	| ДругоеИмяПеременнойИзМакета | '' |"",""Загружает данные из макета MXL, полученного через плагин ГенераторДанных. Возможно явно указать, какие ссылки\наборы записей будут сохранены в контексте. Вторая колонка необязательна. Далее можно воспользоваться спец.шагами из раздела """"UI.Формы.Открыть форму объекта"""". Например, 'И Я открываю основную форму объекта из переменной """"ИмяПеременнойИзМакета""""'"",""Данные.Макеты"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеОтсутствуетПользовательИБ(Парам01)"",""ВБазеОтсутствуетПользовательИБ"",""Когда В базе отсутствует пользователь ИБ """"ТестовыйПользователь"""""",""Проверяется отсутствие пользователя информационной базы"",""Данные.ПользователиИБ"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВБазеСуществуетПользовательИБ(Парам01)"",""ВБазеСуществуетПользовательИБ"",""Тогда В базе существует пользователь ИБ """"ТестовыйПользователь"""""",""Проверяется наличие пользователя информационной базы"",""Данные.ПользователиИБ"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЯУдаляюПользователяИБ(Парам01)"",""ЯУдаляюПользователяИБ"",""И Я удаляю пользователя ИБ """"ТестовыйПользователь"""""",""Удаление пользователя информационной базы"",""Данные.ПользователиИБ"");

	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт

КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт

КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И     Я создаю fixtures по макету ""Макет1""
//@ЯСоздаюFixturesПоМакету(Парам01)
Процедура ЯСоздаюFixturesПоМакету(Знач ИмяМакета) Экспорт
	ЗагрузитьМакет(ИмяМакета);
КонецПроцедуры
"}
}
},
{0,
{"Модуль формы плагина add",0,0,"Модуль","
&НаКлиенте
Перем КонтекстЯдра;

// { Plugin interface
&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
КонецПроцедуры

&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат ЭтотОбъектНаСервере().ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции
// } Plugin interface

// { ПрограммныйИнтерфейс
&НаКлиенте
Процедура СделатьЧтоТо(ТекстДок) Экспорт // Пример функциональности плагина
	СделатьЧтоТоНаСервере(ТекстДок);
КонецПроцедуры
// } ПрограммныйИнтерфейс

// { СлужебныеПроцедурыИФункции
&НаСервере
Процедура СделатьЧтоТоНаСервере(ТекстДок)
	ЭтотОбъектНаСервере().СделатьЧтоТо(ТекстДок);
КонецПроцедуры
// } СлужебныеПроцедурыИФункции

// { Helpers
&НаСервере
Функция ЭтотОбъектНаСервере()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции
// } Helpers
"}
},
{0,
{"Модуль формы обработки шага add",0,0,"Модуль","///////////////////////////////////////////////////
//Служебная часть
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-ADD
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-ADD.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;

	ВсеТесты = Новый Массив;
	
	// описание шагов
	// пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПредставлениеТеста, ОписаниеШага, ТипШагаДляОписания, ТипШагаВДереве);
	
	//ОписаниеШага = ""Загружает данные из макета XML, полученного через пакет Конвертация данных 2.""
	//	+ "" Как и в соседних шага, макет может располагаться в каталоге проекта и можно указать путь относительно каталога проекта. Можно не указывать расширение xml.""
	//	+ "" Пример - 'Макеты\ИмяФайлаМакета'"";
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, 
	//	""ЯЗагружаюМакетКомпоновкиДанных(Парам01,Парам02)"", 
	//	""ЯЗагружаюМакетКомпоновкиДанных"", 
	//	""И я загружаю макет Компоновки данных 2 """"fixtures\ИмяФайлаМакета"""""", 
	//	ОписаниеШага, 
	//	""Данные.Макеты"");
	
	Возврат ВсеТесты;
КонецФункции

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//И     я загружаю макет Компоновки данных 2 ""Макеты\ИмяФайлаМакета""
//@ЯЗагружаюМакетКомпоновкиДанных2(Парам01)
Процедура ЯЗагружаюМакетКомпоновкиДанных(ВерсияКонвертации, Знач ИмяМакета) Экспорт
	
	ЕдинственнаяРеализованнаяВерсияКД = 2;
	Если ВерсияКонвертации <> ЕдинственнаяРеализованнаяВерсияКД Тогда
		Выражение = СтрШаблон(""Реализована загрузка только из файлов КД%1"", ЕдинственнаяРеализованнаяВерсияКД);
		ВызватьИсключение Выражение;
	КонецЕсли;
	
	КонвертацияДанных2 = Ванесса.Плагин(""КонвертацияДанных2"");
	
	ПолноеИмяФайла = Ванесса.Объект.КаталогПроекта + ""\"" + ИмяМакета;
	
	КонвертацияДанных2.ЗагрузитьИзФайла(ПолноеИмяФайла);
	
КонецПроцедуры
"}
}
}
}
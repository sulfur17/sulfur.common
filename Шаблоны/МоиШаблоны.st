{1,
{10,
{"Мои шаблоны",1,0,"",""},
{11,
{"Управляющие",1,0,"",""},
{0,
{"Пока",0,0,"Пока","Пока <?>_Условие Цикл
	
	
	
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для Сч = _с По <?>_по Цикл
	
	
	
КонецЦикла;
"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для Каждого элем Из <?>_Коллекция Цикл
	
	
	
КонецЦикла;"}
},
{0,
{"Если",0,0,"Если","Если <?>_Условие Тогда
	
КонецЕсли;"}
},
{0,
{"Процедура",0,0,"Про[цедура]","Процедура _ИмяПроцедуры()
	<?>
КонецПроцедуры
"}
},
{0,
{"Функция",0,0,"Фун[кция]","Функция _ИмяФункции()
	<?>
КонецФункции
"}
},
{0,
{"Попытка",0,0,"Поп[ытка]","Попытка
	<?>
Исключение
	
КонецПопытки;"}
},
{0,
{"& Директива компиляции",0,0,"&","&<?""Выберите директиву компиляции"", ВыборВарианта, 
""НаКлиенте"", ""НаКлиенте"", 
""НаСервере"", ""НаСервере"", 
""НаСервереБезКонтекста"", ""НаСервереБезКонтекста"", 
""НаКлиентеНаСервере"", ""НаКлиентеНаСервере"", 
""НаКлиентеНаСервереБезКонтекста"", ""НаКлиентеНаСервереБезКонтекста"", 
""Вместо"", ""Вместо(\""\"")	ПродолжитьВызов()"", 
""Перед"", ""Перед(\""\"")"", 
""После"", ""После(\""\"")""
>
"}
},
{0,
{"# Инструкция препроцессора",0,0,"#[Если]","#Если <?""Выберите инструкцию препроцессора"", ВыборВарианта, 
	""Если НаСервере"", ""НаСервере"", 
	""Если НаКлиенте"", ""НаКлиенте"", 
	""Если ТонкийКлиент"", ""ТонкийКлиент"", 
	""Если ВебКлиент"", ""ВебКлиент"", 
	""Если ВнешнееСоединение"", ""ВнешнееСоединение"", 
	""Если ТолстыйКлиентУправляемоеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"", 
	""Если ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение""> Тогда
	<?>
#КонецЕсли"}
},
{0,
{"ТаблицаЗначений",0,0,"Таб[лицаЗначений]","<?""Имя таблицы""> = Новый ТаблицаЗначений;
//МассивТипов = Новый Массив;
//МассивТипов.Добавить(Тип(""Строка""));
//МассивТипов.Добавить(Тип(""Число""));
//МассивТипов.Добавить(Тип(""Дата""));
//МассивТипов.Добавить(Тип(""ДокументСсылка.ЗаказПоставщику""));
//<?""Имя таблицы"">.Колонки.Добавить(""ВозьмемОтсюда"", Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(12,2,ДопустимыйЗнак.Любой), Новый КвалификаторыСтроки(20), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
//<?""Имя таблицы"">.Колонки.Добавить(""ВозьмемСтолько"", ОбщегоНазначения_DS.ПолучитьОписаниеТиповЧисла(10,2));
"}
},
{0,
{"Модифицированность",0,0,"Мод[ифицированность]","	Если Модифицированность Тогда
		ТекстВопроса = НСтр(""ru = 'Сохранить изменения?'"");
		//ТекстВопроса = НСтр(""ru = 'Данные еще не записаны.
		//		|Выполнение действия возможно только после записи данных.
		//		|Данные будут записаны.'"");
		Обработчик = Новый ОписаниеОповещения(""ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи"", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		_ПослатьСудебныеПриказыВСудВыполнить();
	КонецЕсли;

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Записать();
	
	_ПослатьСудебныеПриказыВСудВыполнить();
	
КонецПроцедуры
"}
}
},
{4,
{"Показать пользователю",1,0,"",""},
{0,
{"Сообщение пользователю с привязкой к реквизитам ТЧ",0,0,"Сооб[щение]","ТЧ = Объект.ТабличнаяЧасть1;
Для каждого СтрокаТЧ ИЗ ТЧ Цикл
    Если СтрокаТЧ.Реквизит2 = 55 Тогда
        Индекс = ТЧ.Индекс(СтрокаТЧ);
        Сообщить = Новый СообщениеПользователю;
        Сообщить.Текст = ""<?>"";
        Сообщить.Поле = ""Объект.ТабличнаяЧасть1[""+Индекс+""].Реквизит2"";
		//Сообщение.УстановитьДанные(Объект); //На сервере
		//Сообщение.КлючДанных = Объект.Ссылка; //На клиенте
		//Сообщение.ПутьКДанным = ""Объект"";
        Сообщить.Сообщить();
    КонецЕсли;
КонецЦикла"}
},
{0,
{"Оповещение",0,0,"Оп[овещение]","ПоказатьОповещениеПользователя(""Текст"", Ссылка, ""Пояснение"", Картинка);"}
},
{0,
{"ОткрытьФорму",0,0,"Отк[рытьФорму]","ПараметрыОтбора = Новый Структура(""Изделие, НомерТО, ЗаказНаряд"", Изделие, НомерТО, ЗаказНаряд);
ПараметрыЗаполнения = Новый Структура(""Поставщик, Склад"", СсылкаНаПоставщика, СсылкаНаСклад);
ПараметрыФормы = Новый Структура(""ЗначенияЗаполнения, Отбор"", ПараметрыЗаполнения, ПараметрыОтбора);
ОткрытьФорму(""Документ.Накладная.ФормаОбъекта"", ПараметрыФормы);"}
},
{0,
{"ВыбратьФайлНемодально",0,0,"Файл","//РаботаСФайламиСлужебныйКлиент.ВыбратьПутьКРабочемуКаталогу

Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    Диалог.Заголовок = ""Выберите файл с фотографией"";
    Диалог.ПолноеИмяФайла = """";
    Диалог.ПредварительныйПросмотр = Истина;
    Диалог.Фильтр = 
    ""Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"" 
    + ""Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|""
    + ""Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|""
    + ""Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|"";// картинки

    ОписаниеПродолжения = Новый ОписаниеОповещения(""ЗавершениеВыбораФайла"", ЭтотОбъект);
    
    Диалог.Показать(ОписаниеПродолжения);
    

&НаКлиенте
Процедура ЗавершениеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
        Сообщить(""Файл выбран!"");
    Иначе
        Сообщить(""Файл не выбран!"");
    КонецЕсли;
    
КонецПроцедуры"}
}
},
{2,
{"Прочие",1,0,"",""},
{0,
{"ЗначениеЗаполнено",0,0,"Зна[чениеЗаполнено]","ЗначениеЗаполнено("}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"Запо[лнитьЗначенияСвойств]","ЗаполнитьЗначенияСвойств("}
}
},
{8,
{"Запросы",1,0,"",""},
{0,
{"ЛЕВОЕ СОЕДИНЕНИЕ",0,0,"ЛЕВ[ОЕ СОЕДИНЕНИЕ]","ЛЕВОЕ СОЕДИНЕНИЕ "}
},
{0,
{"ПРАВОЕ СОЕДИНЕНИЕ",0,0,"ПРАВ[ОЕ СОЕДИНЕНИЕ]","ПРАВОЕ СОЕДИНЕНИЕ "}
},
{0,
{"ПОЛНОЕ СОЕДИНЕНИЕ",0,0,"ПОЛН[ОЕ СОЕДИНЕНИЕ]","ПОЛНОЕ СОЕДИНЕНИЕ "}
},
{0,
{"ВНУТРЕННЕЕ СОЕДИНЕНИЕ",0,0,"ВНУ[ТРЕННЕЕ СОЕДИНЕНИЕ]","ВНУТРЕННЕЕ СОЕДИНЕНИЕ"}
},
{0,
{"СОЕДИНЕНИЕ",0,0,"СОЕ[ДИНЕНИЕ]","СОЕДИНЕНИЕ "}
},
{0,
{"ВЫБОР",0,0,"ВЫБ[ОР]","ВЫБОР
|		КОГДА 
|			ТОГДА 
|		ИНАЧЕ 
|	КОНЕЦ"}
},
{0,
{"Запрос",0,0,"За[прос]","<?""Имя запроса""> = Новый Запрос;
<?""Имя запроса"">.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
<?""Имя запроса"">.Текст = ""<?"""", ТекстЗапроса>"";
//<?""Имя запроса"">.УстановитьПараметр(""МоментВремени"", МоментВремени);

Результат<?""Имя запроса""> = <?""Имя запроса"">.Выполнить();
Выборка<?""Имя запроса""> = Результат<?""Имя запроса"">.Выбрать();

Пока Выборка<?""Имя запроса"">.Следующий() Цикл
	
	<?>
	
КонецЦикла;
"}
},
{0,
{"ВидДвижения",0,0,"Вид[Движения]","ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)"}
}
},
{3,
{"Комментарии и области",1,0,"",""},
{0,
{"Описание функции",0,0,"/","// _описание_функции_
//
// Параметры:
//  ПараметрыУказанияСерий - Структура - см. функцию НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//                           Например, Новый Структура()
//  СведенияОбОбновлении  - Массив - cодержит структуры со свойствами:
//     * КодАдресногоОбъекта - Структура - код адресного объекта.
//        ** КодРегиона             - Число - код региона (длина - 2).
//        ** КодНаселенногоПункта   - Число - код населенного пункта (длина - 3).
//        ** КодУлицы               - Число - код улицы (длина - 4).
//     * Наименование        - Строка    - наименование адресного объекта.
//     * ОбновлениеДоступно  - Булево    - признак наличия обновления.
//   Реквизиты - Строка - имена реквизитов, перечисленные через запятую.
//                        Например, ""Код, Наименование, Родитель"".
//             - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//                        псевдоним поля для возвращаемой структуры с результатом,
//                        а в качестве значения (опционально) фактическое имя поля в таблице.
//                        Если значение не определено, то имя поля берется из ключа.
//             - Массив, ФиксированныйМассив - имена реквизитов (Строка).
//
// Возвращаемое значение:
//  Булево - Истина, если хотя бы одна из переданных ролей доступна текущему пользователю, либо у него есть административные права.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(""ru='%1 пошел в %2'""), ""Вася"", ""Зоопарк"") = ""Вася пошел в Зоопарк"".
//
// Статья про Описание процедур и функций https://its.1c.ru/db/v8std#content:2149184102:hdoc"}
},
{6,
{"Структура модулей",1,0,"",""},
{0,
{"Общий модуль",0,0,"Модуль","////////////////////////////////////////////////////////////////////////////////
// Краткое описание и назначение:
// - для того-то;
// - для сего-то;
// - прочее.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещения

#КонецОбласти

#Область Служебные

Функция ИмяМодуля()
	Возврат ""ОбщийМодуль"";
КонецФункции

Функция ПредставлениеМодуля()
	Возврат ""Общий модуль""; // без точек, для вывода в ЖР
КонецФункции

#КонецОбласти

#КонецОбласти
"}
},
{0,
{"Модуль объекта, менеджера, набора записей, обработки, отчета и т.п.",0,0,"Модуль","////////////////////////////////////////////////////////////////////////////////
// Краткое описание и назначение:
// - для того-то;
// - для сего-то;
// - прочее.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


#КонецОбласти

#Область ОбработчикиСобытий


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещения

#КонецОбласти


#КонецОбласти
"}
},
{0,
{"Модуль формы",0,0,"Модуль","////////////////////////////////////////////////////////////////////////////////
// Краткое описание и назначение:
// - для того-то;
// - для сего-то;
// - прочее.
//
// Параметры формы и их назначение:
// - такой-то для того-то;
// - сякой-то для сего-то.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>

#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещения

#КонецОбласти

#КонецОбласти
"}
},
{0,
{"Модуль команды",0,0,"Модуль","////////////////////////////////////////////////////////////////////////////////
// Краткое описание и назначение:
// - для того-то;
// - для сего-то;
// - прочее.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытий


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещения

#КонецОбласти


#КонецОбласти
"}
},
{0,
{"В общем случае",0,0,"Модуль","#Область ОписаниеПеременных
//Код процедур и функций
#КонецОбласти

#Область ПрограммныйИнтерфейс
//Экспортные процедуры и функции, предназначенные для использования другими объектами конфигурации 
//	или другими программами (например, через внешнее соединение). 
#КонецОбласти

#Область ОбработчикиСобытий
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Процедуры и функции, составляющие внутреннюю реализацию общего модуля.
//В тех случаях, когда общий модуль является частью некоторой функциональной подсистемы, 
//	включающей в себя несколько объектов метаданных, в этом разделе также могут быть размещены служебные экспортные процедуры и функции, 
//	предназначенные только для вызова из других объектов данной подсистемы.
#Область ФункциональныйПодраздел
//Для объемных общих модулей рекомендуется создавать функциональные подразделы
#КонецОбласти

#Область ОбработчикиОповещения

#КонецОбласти

#КонецОбласти

#Область Инициализация
//Код процедур и функций
#КонецОбласти"}
},
{1,
{"заполнение множества строк",1,0,"",""},
{0,
{"Модуль формы пакетной",0,0,"Модуль","////////////////////////////////////////////////////////////////////////////////
// Краткое описание и назначение:
// - для того-то;
// - для сего-то;
// - прочее.
//
// Параметры формы и их назначение:
// - такой-то для того-то;
// - сякой-то для сего-то.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>

&НаКлиенте
Процедура ОтобранныеДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОписаниеТекущейКолонки = ОписаниеТекущейКолонки();
	
	Если РаботаСФормамиКлиентСервер.КолонкаТолькоПросмотр(ОписаниеТекущейКолонки, Ложь) Тогда
		
		ПоказатьЗначение(, Элемент.ТекущиеДанные[ОписаниеТекущейКолонки.ИмяПоля]);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьВВыделенныхСтроках(Команда)
	
	ОписаниеТекущейКолонки = ОписаниеТекущейКолонки();
	
	Если НЕ РаботаСФормамиКлиентСервер.КолонкаТолькоПросмотр(ОписаниеТекущейКолонки) Тогда
		
		РаботаСФормамиКлиентСервер.ЗаполнитьЗначенияВВыделенныхСтроках(ОписаниеТекущейКолонки, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещения

#КонецОбласти

&НаСервере
Функция ОписаниеТекущейКолонки()
	
	Таблица = ТекущийЭлемент;
	
	Возврат РаботаСФормамиСервер.ОписаниеКолонкиТаблицыФормы(Таблица.ТекущийЭлемент, РеквизитФормыВЗначение(""Объект""));
	
КонецФункции

#КонецОбласти
"}
}
}
},
{0,
{"Область",0,0,"Обл[асть]","#Область <?""Имя области (без пробелов)"">

#КонецОбласти"}
}
},
{3,
{"СКД",1,0,"",""},
{0,
{"СКД",0,0,"СКД","КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(""Период"", Объект.ДатаСоставленияОбъяснения);

СКД = Отчеты.ИмяОтчета.ПолучитьМакет(""ОсновнаяСКД"");
НастройкиКомпоновки = СКД.НастройкиПоУмолчанию;

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновки,,, Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);

//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//ТаблицаВывода =  Новый ТаблицаЗначений;
//ПроцессорВывода.УстановитьОбъект(ТаблицаВывода);
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ТабДок = Новый ТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(ТабДок);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);
"}
},
{0,
{"СКД 2",0,0,"","СтандартнаяОбработка = Ложь;

НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);

//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//ТаблицаВывода =  Новый ТаблицаЗначений;
//ПроцессорВывода.УстановитьОбъект(ТаблицаВывода);
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
ПроцессорВывода.Вывести(ПроцессорКомпоновки);
"}
},
{0,
{"Отбор СКД",0,0,"Отбор","НовыеНастройки = КомпоновщикНастроекОтбор.ПолучитьНастройки();
ЭлементОтбора = НовыеНастройки.Отбор.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(""ВидЦены"");
ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
ЭлементОтбора.ПравоеЗначение = СписокВидовЦен;
ЭлементОтбора.Использование = Истина;
"}
}
},
{17,
{"AutoDesigner",1,0,"",""},
{0,
{"ээ / '00010101'",0,0,"ээ","'00010101'"}
},
{0,
{"Н / Неопределено",0,0,"Н[еопределено]","Неопределено"}
},
{0,
{"Y / Неопределено",0,0,"Y","Неопределено"}
},
{0,
{"БЮ / <>",0,0,"БЮ","<>"}
},
{0,
{"? / &",0,0,"?","&"}
},
{0,
{"\ / |",0,0,"\","|"}
},
{0,
{"Ю / >",0,0,"Ю",">"}
},
{0,
{"Б / <",0,0,"Б","<"}
},
{0,
{"ХЪ / []",0,0,"ХЪ","[]"}
},
{0,
{"Тогда",0,0,"Тогда","Тогда

КонецЕсли;
"}
},
{0,
{"Т / NULL",0,0,"Т","NULL"}
},
{0,
{"TCNM / ЕСТЬNULL",0,0,"TCNM[NULL]","ЕСТЬNULL("}
},
{0,
{"ЕСТЬ / ЕСТЬNULL",0,0,"ЕСТЬ[ТГДД]","ЕСТЬNULL("}
},
{0,
{"Ю= / >=",0,0,"Ю=",">="}
},
{0,
{"Б= / <=",0,0,"Б=","<="}
},
{0,
{"ПустаяДата",0,0,"''","'0001-01-01'"}
},
{0,
{"№ / #",0,0,"№","#"}
}
},
{6,
{"Разное",1,0,"",""},
{0,
{"ТекущаяСтрока",0,0,"ТекущаяСтрока","ТекущаяСтрока = Объект.Товары.ТекущаяСтрока;
СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);"}
},
{0,
{"ОбменДанными",0,0,"","Объект.ОбменДанными.Загрузка = Истина;
Объект.ДополнительныеСвойства.Вставить(""ОтключитьМеханизмРегистрацииОбъектов"");
//Объект.ДополнительныеСвойства.Вставить(""НеРегистрироватьИзмененияПоУзлуМобУстройства""); // для Байбола
//Объект.ДополнительныеСвойства.Свойство(""ПропуститьПроверкуЗапретаИзменения"")"}
},
{0,
{"Подставка",0,0,"","Процедура ПодставитьЗаменяемыйПараметр(Запрос, Знач ИмяПараметра, Замена) Экспорт

	Запрос.Текст = СтрЗаменять(Запрос.Текст, ИмяПараметра, Замена);
	
КонецПроцедуры

Процедура ПодставитьЗаменяемыйОтбор(Запрос, Знач ИмяПараметра, ЗаменаПриВыполненииУсловия, Условие = Истина, ЗаменаПриНевыполненииУсловия = ""Истина"") Экспорт
	
	Замена = ?(Условие, ЗаменаПриВыполненииУсловия, ЗаменаПриНевыполненииУсловия);
	
	Если Лев(ИмяПараметра, 1) <> ""&"" Тогда
		ИмяПараметра = ""&"" + ИмяПараметра;
	КонецЕсли;
	
	ПодставитьЗаменяемыйПараметр(Запрос, ИмяПараметра, Замена);
	
КонецПроцедуры

Процедура ПодставитьЗаменяемоеПоле(Запрос, Знач ИмяПараметра, Знач ЗаменаПриВыполненииУсловия, Условие = Истина, ЗаменаПриНевыполненииУсловия = """") Экспорт
	
	Замена = ?(Условие, ЗаменаПриВыполненииУсловия, ЗаменаПриНевыполненииУсловия);
	
	Если Найти(Запрос.Текст, ИмяПараметра + "","") > 0 Тогда
		ИмяПараметра = ИмяПараметра + "","";
		
		Если Замена <> """"
			И Прав(Замена, 1) <> "","" Тогда
			
			Замена = Замена + "","";
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ИмяПараметра, 1) <> ""&"" Тогда
		ИмяПараметра = ""&"" + ИмяПараметра;
	КонецЕсли;
	
	ПодставитьЗаменяемыйПараметр(Запрос, ИмяПараметра, Замена);
	
КонецПроцедуры

Процедура ПодставитьЗаменяемуюТаблицу(Запрос, Знач ИмяПараметра, ИмяТаблицы) Экспорт
	
	Если Лев(ИмяПараметра, 1) <> ""&"" Тогда
		ИмяПараметра = Сред(ИмяПараметра, 2);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ""&"" + ИмяПараметра, ИмяТаблицы);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ИмяПараметра, ИмяТаблицы);
	
КонецПроцедуры

Процедура ПодставитьЗапросВОбъединение(Запрос, ДополнительныйЗапросТекст) Экспорт
	
	ПодстрокаОбъединить = ""ОБЪЕДИНИТЬ "" + ?(Все, ""ВСЕ"", """");
	Если Найти(Запрос.Текст, ""УПОРЯДОЧИТЬ ПО"") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""УПОРЯДОЧИТЬ ПО"", ""
		|"" + ПодстрокаОбъединить + ""
		|""
		+ ДополнительныйЗапросТекст + ""
		|УПОРЯДОЧИТЬ ПО
		|"");
	Иначе
		Запрос.Текст = Запрос.Текст + ""
		|"" + ПодстрокаОбъединить + ""
		|"" + ДополнительныйЗапросТекст;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодставитьПомещениеВоВременнуюТаблицу(Запрос, ИмяВременнойТаблицы = """", Знач ИмяПараметра = ""ЗП_ПОМЕСТИТЬ_ЗП"") Экспорт
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""ЗП_ПОМЕСТИТЬ_ЗП"", ИмяВременнойТаблицы);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ""ПОМЕСТИТЬ ЗП_ПОМЕСТИТЬ_ЗП"", """");
	КонецЕсли;
	
КонецПроцедуры
"}
},
{0,
{"Первые N записей",0,0,"","ВЫБРАТЬ
    Пример.Ссылка КАК Номенклатура,
    Пример.Родитель КАК Родитель,
    КОЛИЧЕСТВО(ПримерДва.Ссылка) КАК НомерСтрокиГруппы
ПОМЕСТИТЬ ВТ_База
ИЗ
    Справочник.Пример КАК Пример
        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пример КАК ПримерДва
        ПО Пример.Родитель = ПримерДва.Родитель
            И Пример.Наименование >= ПримерДва.Наименование
СГРУППИРОВАТЬ ПО
    Пример.Родитель,
    Пример.Ссылка
;
ВЫБРАТЬ
    Пример.Ссылка КАК Номенклатура,
    Пример.Родитель КАК Родитель,
    ПримерДва.Ссылка КАК Номер
ИЗ
    ВТ_База КАК ВТ_База
ГДЕ
    ВТ_База.НомерСтрокиГруппы <= 5"}
},
{0,
{"ОбработчикОбновленияОтложенный",0,0,"","// <описание процедуры>
//
// Параметры:
//  Параметры - Структура - структура параметров отложенного обработчика обновления.
//  * ОбработкаЗавершена (Булево) - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                  следует записать в него значение Ложь;
//  * ПрогрессВыполнения (Структура) - необходимо заполнять для отображения прогресса обработки данных:
//      * ВсегоОбъектов (Число) - общее количество объектов, которое необходимо обработать;
//      * ОбработаноОбъектов (Число) - сколько объектов уже обработано.
//
Процедура ИмяПроцедуры(Параметры) Экспорт
	
	
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры"}
},
{0,
{"Распределить",0,0,"","Функция ПараметрыПроцедурыРаспределить() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить(""ПоляИзмерений"", """");
	Параметры.Вставить(""ПолеКоличествоРесурса"", """");
	Параметры.Вставить(""ПолеКоличествоПотребности"", """");
	Параметры.Вставить(""ПоляДобавки"", """");
	Параметры.Вставить(""ПеренестиНевостребованныеОстаткиРесурсов"", Ложь);
	Параметры.Вставить(""СтруктураАвтозаполенияНовыхСтрок"", Неопределено);
	Параметры.Вставить(""УдалитьПотребностиБезРесурсов"", Ложь);
	Возврат Параметры;
	
КонецФункции

// Процедура распределяет ресурсы по потребностям (например комплектацию по продукции).
// В таблицу потребностей ресурсы добавляются, а из таблицы ресурсов они вычитаются.
// Таблицы должны иметь одинаково названные колонки измерений,
// по разному названные колонки количеств,
// а так же они должны быть заранее упорядочены так, как должен происходить перенос ресурсов (например по FIFO).
//
// Параметры:
//  ТЗРесурсов - ТаблицаЗначений - таблица в которой собраны ресурсы на распределение.
//  ТЗПотребностей - ТаблицаЗначений - таблица в которой собраны потребности ресурсов.
//  Параметры - Структура - параметры распределения:
//     * ПоляИзмерений - Строка - имена колонок по которым сопоставляем друг другу Потребности и Ресурсы. Должны совпадать в обеих таблицах.
//     * ПолеКоличествоРесурса - Строка - имя колонки в которой записано сколько нужно ресурса.
//     * ПолеКоличествоПотребности - Строка - имя колонки в которой записано сколько нужно ресурса.
//     * ПоляДобавки - Строка - имена колонок ТЗРесурсов которые надо переносить вместе с ресурсом.
//     * ПеренестиНевостребованныеОстаткиРесурсов - Булево - надо ли ресурсы которые остались невостребованными переносить в ТЗПотребностей.
//     * СтруктураАвтозаполенияНовыхСтрок - Структура - структура который надо ЗаполнитьЗначенияСвойств() для каждой строки невостребованных ресурсов,
//                                                      если мы их переносим в ТЗПотребностей.
//     * УдалитьПотребностиБезРесурсов - Булево - надо ли удалять строки потребностей, которым совсем не досталось ресурсов.
//
Процедура Распределить(ТЗРесурсов, ТЗПотребностей, Параметры) Экспорт
	
	Assert(ТЗРесурсов.Количество() > 0 И ТЗПотребностей.Количество() > 0);
	Assert(Параметры.ПолеКоличествоРесурса <> Параметры.ПолеКоличествоПотребностей);
	
	ОписаниеТиповРесурса = Новый ОписаниеТипов(ТЗРесурсов.Колонки[Параметры.ПолеКоличествоРесурса].ТипЗначения, , ""NULL""); // убираем тип NULL из возможных для этой колонки. Зачем - не помню.
	ТЗПотребностей.Колонки.Добавить(Параметры.ПолеКоличествоРесурса, ОписаниеТиповРесурса);
	
	Если Параметры.СтруктураАвтозаполненияНовыхСтрок <> Неопределено Тогда
		// Формируем СписокСвойстваАвтозаполнения
		МассивСвойств = Новый Массив;
		Для каждого КиЗ Из Параметры.СтруктураАвтозаполненияНовыхСтрок Цикл
			МассивСвойств.Добавить(КиЗ.Ключ);
		КонецЦикла;
		СписокСвойстваАвтозаполнения = Join(МассивСвойств);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ПоляДобавки) Тогда
		МассивПолейДобавления = Split(Параметры.ПоляДобавки);
		Для каждого ПолеДобавки Из МассивПолейДобавления Цикл
			ПолеДобавки = СокрЛП(ПолеДобавки);
			ОписаниеТиповДобавления = Новый ОписаниеТипов(ТЗРесурсов.Колонки[ПолеДобавки].ТипЗначения, , ""NULL""); // убираем тип NULL из возможных для этой колонки. Зачем - не помню.
			ТЗПотребностей.Колонки.Добавить(ПолеДобавки, ОписаниеТиповДобавления);
		КонецЦикла;
	КонецЕсли;
	
	Отбор = Новый Структура(Параметры.ПоляИзмерений);
	Для каждого стрРесурс Из ТЗРесурсов Цикл
		ЗаполнитьЗначенияСвойств(Отбор, стрРесурс);
		
		Если стрРесурс[Параметры.ПолеКоличествоРесурса] = 0 Тогда
			Продолжить; // распределять нечего, выходим (видимо эту проверку я добавил как костыль, потому что не отфильтровал нули в ТЗРесурсов)
		КонецЕсли;
		
		СтрокиПотребностей = ТЗПотребностей.НайтиСтроки(Отбор);
		
		Сч = 0;
		ВГраница = СтрокиПотребностей.ВГраница();
		Пока Сч <= ВГраница Цикл
			стрПотребность = СтрокиПотребностей[Сч];
			
			ДоЗаполненияПотребности = стрПотребность[Параметры.ПолеКоличествоПотребности] - стрПотребность[Параметры.ПолеКоличествоРесурса];
			СколькоВЭтуСтроку = Мин(стрРесурс[Параметры.ПолеКоличествоРесурса], ДоЗаполненияПотребностит);
			Если СколькоВЭтуСтроку > 0 Тогда
				
				// Переносим ресурс в строку потребности.
				стрПотребность[Параметры.ПолеКоличествоРесурса] = стрПотребность[Параметры.ПолеКоличествоРесурса] + СколькоВЭтуСтроку;
				стрРесурс[Параметры.ПолеКоличествоРесурса] = стрРесурс[Параметры.ПолеКоличествоРесурса] - СколькоВЭтуСтроку;
				
				Если ЗначениеЗаполнено(Параметры.ПоляДобавки) Тогда
					ЗаполнитьЗначенияСвойств(стрПотребность, стрРесурс, Параметры.ПоляДобавки);
					
					НужноЕщеВЭтуСтроку = стрПотребность[Параметры.ПолеКоличествоПотребности] - стрПотребность[Параметры.ПолеКоличествоРесурса];
					Если НужноЕщеВЭтуСтроку > 0 Тогда
						// Эту строку ресурса мы уже исчерпали, на следующей итерации будет другой ресурс, так что надо:
						
						// 1. Завершить эту строку потребности. Считаем что в нее больше не надо ресурса.
						стрПотребность[Параметры.ПолеКоличествоПотребности] = стрПотребность[Параметры.ПолеКоличествоРесурса];
						
						// 2. Добавить новую строку потребности (копию этой) и переносить остаток ресурсов будем уже в нее.
						стрПотребностьНов = ТЗПотребностей.Добавить();
						ЗаполнитьЗначенияСвойств(стрПотребностьНов, стрПотребность, , Параметры.ПоляДобавки); // тут поля добавки будут другие, поэтому их не копируем
						стрПотребностьНов[Параметры.ПолеКоличествоПотребности] = НужноЕщеВЭтуСтроку;
						стрПотребностьНов[Параметры.ПолеКоличествоРесурса] = 0;
						СтрокиПотребностей.Добавить(стрПотребностьНов);
						ВГраница = ВГраница + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Сч = Сч + 1;
		КонецЦикла;
		
		Если Параметры.ПеренестиНевостребованныеОстаткиРесурсов Тогда
			
			стрПотребность = ТЗПотребностей.Добавить();
			СписокСвойствЗаполнения = Параметры.ПоляИзмерений + "","" + Параметры.ПолеКоличествоРесурса;
			Если ЗначениеЗаполнено(Параметры.ПоляДобавки) Тогда
				СписокСвойствЗаполнения = Параметры.СписокСвойствЗаполнения + "","" + Параметры.ПоляДобавки;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(стрПотребность, стрРесурс, СписокСвойствЗаполнения);
			
			Если Параметры.СтруктураАвтозаполненияНовыхСтрок <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(стрПотребность, Параметры.СтруктураАвтозаполненияНовыхСтрок, СписокСвойствАвтозаполнения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.УдалитьПотребностиБезРесурсов Тогда
		СтруктураОтбора = Новый Структура(Параметры.ПолеКоличествоРесурса, 0);
		СтрокиНаУдаление = ТЗПотребностей.НайтиСтроки(СтруктураОтбора);
		Сч = СтрокиНаУдаление.Количество() - 1;
		Пока Сч >= 0 Цикл
			ТЗПотребностей.Удалить(СтрокиНаУдаление[Сч]);
			
			Сч = Сч - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
"}
}
},
{1,
{"8.3.17",1,0,"",""},
{0,
{"ОбработкаОшибок",0,0,"","ОбработкаОшибок"}
}
},
{0,
{"Транзакция",0,0,"Тран[закция]","НачатьТранзакцию();
 
Попытка
 
    // ДелаемЧтоТо();
 
    ЗафиксироватьТранзакцию();
Исключение
     
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	Сообщение = СтрШаблон(""По договору %1 ошибка: %2"", Выборка.ПредставлениеДоговора, ПодробноеПредставлениеОшибки);
	// СтандартныеПодсистемы.БазоваяФункциональность
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
    Если ТранзакцияАктивна() Тогда
        ОтменитьТранзакцию();
	КонецЕсли;
	
    ВызватьИсключение;
 
КонецПопытки;
"}
}
}
}
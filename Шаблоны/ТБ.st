{1,
{26,
{"ТБ",1,0,"",""},
{0,
{"Процедуры для коллекций",0,0,"ТБ[.Коллекции]","ТБ.Коллекции."}
},
{10,
{"Процедуры для коллекций",1,0,"",""},
{0,
{"Универсальные",0,0,"ТБ.Коллекции[.Универсальные]","ТБ.Коллекции.Универсальные."}
},
{5,
{"Универсальные",1,0,"",""},
{0,
{"СвойстваЭлементов",0,0,"ТБ.Коллекции.Универсальные[.]","ТБ_ОбщиеПроцедуры.СвойстваЭлементовКоллекции // Возвращает свойства элементов коллекции."}
},
{0,
{"ЭлементыСоСвойствомИзСписка",0,0,"ТБ.Коллекции.Универсальные[.]","ТБ_ОбщиеПроцедуры.ЭлементыКоллекции // Возвращает элементы коллекции, у которых свойство входит/не входит в список"}
},
{0,
{"НайтиЭлементыОтбором",0,0,"ТБ.Коллекции.Универсальные[.]","ТБ_ОбщиеПроцедуры.НайтиЭлементыОтбором // Находит элементы коллекции по отбору"}
},
{0,
{"СовпадаютПоЗначениям",0,0,"","ТБ_ОбщиеПроцедуры.СовпадаютПоЗначениям // Проверяет переданные коллекции - равны ли в них значения."}
},
{0,
{"ЗаполнитьЗначения",0,0,"","ТБ_ОбщиеПроцедуры.ЗаполнитьЗначенияВКоллекции"}
}
},
{0,
{"ТаблицаЗначений",0,0,"ТБ.Коллекции[.ТЗ]","ТБ.Коллекции.ТЗ."}
},
{2,
{"для ТаблицЗначений",1,0,"",""},
{0,
{"ПервыеNСтрокТаблицы",0,0,"ТБ.Коллекции.ТЗ[.]","ТБ_ОбщиеПроцедуры.СкопироватьПервыеNСтрокТаблицы"}
},
{0,
{"СтруктураВТаблицуЗначений",0,0,"","ТБ_ОбщиеПроцедурыСервер.СтруктураВТаблицуЗначений"}
}
},
{0,
{"Массив",0,0,"ТБ.Коллекции[.Массив]","ТБ.Коллекции.Массив."}
},
{4,
{"для Массивов",1,0,"",""},
{0,
{"ОбеспечитьМассивЗначений",0,0,"ТБ.Коллекции.Массив[.]","ТБ_ОбщиеПроцедуры.ОбеспечитьМассивЗначений // Если значения переданы строкой, то делает из нее массив."}
},
{0,
{"УдалитьДубликаты",0,0,"ТБ.Коллекции.Массив[.]","ТБ_ОбщиеПроцедуры.УдалитьДубликатыМассива"}
},
{0,
{"Массив(1)",0,0,"ТБ.Коллекции.Массив[.]","ТБ_ОбщиеПроцедуры.МассивИзОдногоЭлемента"}
},
{0,
{"Массив(N)",0,0,"ТБ.Коллекции.Массив[.]","ТБ_ОбщиеПроцедуры.МассивИзЭлементов"}
}
},
{0,
{"Ссылка",0,0,"ТБ.Коллекции[.Ссылка]","ТБ.Коллекции.Ссылка."}
},
{0,
{"СКД",0,0,"ТБ.Коллекции[.СКД]","ТБ.Коллекции.СКД."}
},
{6,
{"для СКД",1,0,"",""},
{0,
{"УдалитьОтборКД",0,0,"","ТБ_ОбщиеПроцедуры.УдалитьОтборКомпоновкиДанных"}
},
{0,
{"УстановитьОтборКД",0,0,"","ТБ_ОбщиеПроцедуры.УстановитьОтборКомпоновкиДанных"}
},
{0,
{"СкопироватьОтборКД",0,0,"","ТБ_ОбщиеПроцедуры.СкопироватьОтборКомпоновкиДанных"}
},
{0,
{"СкопироватьПараметрыКД",0,0,"","ТБ_ОбщиеПроцедуры.СкопироватьПараметрыКомпоновкиДанных"}
},
{0,
{"СтруктураПараметровКД",0,0,"","ТБ_ОбщиеПроцедуры.ПолучитьСтруктуруПараметровДанных // делает структуру из параметров КД"}
},
{0,
{"СкопироватьПоляВыбораКД",0,0,"","ТБ_ОбщиеПроцедуры.СкопироватьПоляВыбораКомпоновкиДанных"}
}
},
{3,
{"Структуры",1,0,"",""},
{0,
{"УстановитьПараметрыЗапроса",0,0,"","ОбщегоНазначения.УстановитьПараметрыЗапроса"}
},
{0,
{"РезультатЗапросаВМассивСтруктур",0,0,"","ТБ_ОбщиеПроцедурыСервер.РезультатЗапросаВМассивСтруктур"}
},
{0,
{"ПолучитьСтруктуруПоРезультатуЗапроса",0,0,"Стр[уктур]","ДанныеСтруктура = Неопределено;
БазовыеФункцииСистемыСервер.ПолучитьСтруктуруПоРезультатуЗапроса(РезультатЗапрос, ДанныеСтруктура);"}
}
}
},
{0,
{"Самоотстрел расширения",0,0,"Рас[ширение]","//заменить DEV_123 на нужный номер задачи
&После(""ПриДобавленииОбработчиковОбновления"")
Процедура DEV_123_ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = ""1.2.351.0"";
	Обработчик.Процедура = ""ОбновлениеИнформационнойБазыЗаймы.DEV_123_УдалитьРасширение"";
	
КонецПроцедуры

// Обработчик удаления расширения. Процедура не переопределяемая
Процедура DEV_123_УдалитьРасширение() Экспорт
	БазовыеФункцииСистемыСервер.ОтключитьУдалитьРасширение(""DEV_123"", Истина);
КонецПроцедуры"}
},
{0,
{"ОписаниеТипов",0,0,"","БазовыеФункцииСистемы.ПолучитьОписаниеТиповСтроки
БазовыеФункцииСистемы.ПолучитьОписаниеТиповЧисла
БазовыеФункцииСистемы.ПолучитьОписаниеТиповДаты"}
},
{0,
{"запрос Способа оформления",0,0,"","ВЫБРАТЬ
	ДоговорыКонтрагентов.Ссылка КАК Договор
ПОМЕСТИТЬ ВТ_Договоры
ИЗ
	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	ТекущиеУсловияДоговоровЗайма.Договор КАК Договор,
	ТекущиеУсловияДоговоровЗайма.Регистратор КАК Регистратор,
	ТекущиеУсловияДоговоровЗайма.Регистратор.ИзменениеСпособаОформленияДоговораЗайма КАК ИзменениеСпособаОформленияДоговораЗайма,
	ТекущиеУсловияДоговоровЗайма.Период КАК Период
ПОМЕСТИТЬ ВТ_ТекущиеУсловияДоговоровЗайма
ИЗ
	РегистрСведений.ТекущиеУсловияДоговоровЗайма КАК ТекущиеУсловияДоговоровЗайма
ГДЕ
	ТекущиеУсловияДоговоровЗайма.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИзмененияУсловийДоговораЗайма.ЗаключениеДоговора)
	И ТекущиеУсловияДоговоровЗайма.Договор В
			(ВЫБРАТЬ
				ВТ_Договоры.Договор
			ИЗ
				ВТ_Договоры)

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_ТекущиеУсловияДоговоровЗайма.Договор КАК Договор,
	ВТ_ТекущиеУсловияДоговоровЗайма.Регистратор КАК Регистратор,
	ВТ_ТекущиеУсловияДоговоровЗайма.ИзменениеСпособаОформленияДоговораЗайма КАК ИзменениеСпособаОформленияДоговораЗайма,
	ВТ_ТекущиеУсловияДоговоровЗайма.Период КАК Период
ПОМЕСТИТЬ ВТ_ТекущиеУсловияСПризнакамиИзмененияСпособаОформления
ИЗ
	ВТ_ТекущиеУсловияДоговоровЗайма КАК ВТ_ТекущиеУсловияДоговоровЗайма
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеУсловияДоговоровЗайма КАК ВТ_ТекущиеУсловияДоговоровЗаймаПозднее
		ПО ВТ_ТекущиеУсловияДоговоровЗайма.Договор = ВТ_ТекущиеУсловияДоговоровЗаймаПозднее.Договор
			И ВТ_ТекущиеУсловияДоговоровЗайма.ИзменениеСпособаОформленияДоговораЗайма = ВТ_ТекущиеУсловияДоговоровЗаймаПозднее.ИзменениеСпособаОформленияДоговораЗайма
			И ВТ_ТекущиеУсловияДоговоровЗайма.Период < ВТ_ТекущиеУсловияДоговоровЗаймаПозднее.Период
ГДЕ
	ВТ_ТекущиеУсловияДоговоровЗаймаПозднее.Период ЕСТЬ NULL

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_ТекущиеУсловияДоговоровЗайма
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_Договоры.Договор КАК Договор,
	ВЫБОР
		КОГДА ВТ_ПоследниеИзмененныеСпособыОформления.Регистратор ЕСТЬ НЕ NULL 
			ТОГДА ВТ_ПоследниеИзмененныеСпособыОформления.Регистратор
		КОГДА ВТ_ПоследниеНеИзмененныеСпособыОформления.Регистратор ЕСТЬ НЕ NULL 
			ТОГДА ВТ_ПоследниеНеИзмененныеСпособыОформления.Регистратор
		ИНАЧЕ НЕОПРЕДЕЛЕНО
	КОНЕЦ КАК Регистратор
ПОМЕСТИТЬ ВТ_РегистраторыСпособаОформления
ИЗ
	ВТ_Договоры КАК ВТ_Договоры
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеУсловияСПризнакамиИзмененияСпособаОформления КАК ВТ_ПоследниеИзмененныеСпособыОформления
		ПО ВТ_Договоры.Договор = ВТ_ПоследниеИзмененныеСпособыОформления.Договор
			И (ВТ_ПоследниеИзмененныеСпособыОформления.ИзменениеСпособаОформленияДоговораЗайма)
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТекущиеУсловияСПризнакамиИзмененияСпособаОформления КАК ВТ_ПоследниеНеИзмененныеСпособыОформления
		ПО ВТ_Договоры.Договор = ВТ_ПоследниеНеИзмененныеСпособыОформления.Договор
			И (НЕ ВТ_ПоследниеНеИзмененныеСпособыОформления.ИзменениеСпособаОформленияДоговораЗайма)
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_ТекущиеУсловияСПризнакамиИзмененияСпособаОформления
;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_РегистраторыСпособаОформления.Договор КАК Договор,
	ВЫБОР
		КОГДА ВТ_РегистраторыСпособаОформления.Регистратор.СпособОформленияДоговора = ЗНАЧЕНИЕ(Перечисление.СпособыОформленияДоговоров.ПустаяСсылка)
			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыОформленияДоговоров.ВБумажномВиде)
		ИНАЧЕ ВТ_РегистраторыСпособаОформления.Регистратор.СпособОформленияДоговора
	КОНЕЦ КАК СпособОформленияДоговора,
	ВТ_РегистраторыСпособаОформления.Регистратор.ИдентификаторАСП КАК ИдентификаторАСП,
	ВТ_РегистраторыСпособаОформления.Регистратор.ИдентификаторАСПМенеджера КАК ИдентификаторАСПМенеджера
ПОМЕСТИТЬ ВТ_СпособыОформленияДоговоров
ИЗ
	ВТ_РегистраторыСпособаОформления КАК ВТ_РегистраторыСпособаОформления
ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_РегистраторыСпособаОформления
;"}
},
{0,
{"Подставить",0,0,"Под[ставить]","СтроковыеФункцииКлиентСервер.ПодставитьЗаменяемыйОтбор
СтроковыеФункцииКлиентСервер.ПодставитьЗаменяемоеПоле
СтроковыеФункцииКлиентСервер.ПодставитьЗаменяемоеПЕРВЫЕ"}
},
{0,
{"Модуль внешней обработки с длительной операцией",0,0,"модуль","
#Область ПрограммныйИнтерфейс

// Типовая функция БСП, обязательна при использовании внешних обработок
// 
// Возвращаемое значение:
// 	Структура - Описание см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(ВерсияБСП);
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	
	ПараметрыРегистрации.Версия = ""1.0"";
	
	// Команды на выполнение серверного метода
	ПредставлениеКоманды = Метаданные().Представление();
	ИдентификаторКоманды = Метаданные().Имя;
	ТипКомандыВызовСерверногоМетода = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДополнительныеОтчетыИОбработкиПереопределяемый.ДобавитьКоманду(
		ПараметрыРегистрации.Команды, 
		ПредставлениеКоманды, 
		ИдентификаторКоманды, 
		ТипКомандыВызовСерверногоМетода, 
		Истина);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()

// Типовая функция БСП, обязательна при использовании команд
//
// Параметры:
//   ИдентификаторКоманды - Строка    - Имя команды как оно задано в функции СведенияОВнешнейОбработке() модуля объекта.
//   ПараметрыКоманды     - Структура - Параметры выполнения команды.
//                                      См. ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне().
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды) Экспорт
	
	ПараметрыОбработкиДанных = ПараметрыОбработкиДанных(ПараметрыКоманды);
	
	ОбработкаДанных(ПараметрыОбработкиДанных);   
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыОбработкиДанных(ПараметрыКоманды)
	
	ПараметрыОбработкиДанных = Новый Структура;
	ПараметрыОбработкиДанных.Вставить(""Лог"", ЛогированиеСервер.КлиентЖурналРегистрации());
	ПараметрыОбработкиДанных.Вставить(""Ссылка"", ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	
	ОграничениеПорцииДанныхВЗапросе = 100000;
	ПараметрыОбработкиДанных.Вставить(""ОграничениеПорцииДанныхВЗапросе"", ОграничениеПорцииДанныхВЗапросе);
	
	ПараметрыОбработкиДанных.Вставить(""ИмяСобытия"", ИмяСобытия());
	МаксимальноеКоличествоИтераций = 50;
	ПараметрыОбработкиДанных.Вставить(""МаксимальноеКоличествоИтераций"", МаксимальноеКоличествоИтераций);
	ПараметрыОбработкиДанных.Вставить(""ПриОшибкеОбработкиОбъектаВызыватьИсключение"", Ложь);
	
	ПараметрыДлительныхОпераций = ОбновлениеИнформационнойБазыЗаймы.ПараметрыДлительныхОпераций();
	//ПараметрыДлительныхОпераций.ОбменДаннымиЗагрузка = Истина;
	//ПараметрыДлительныхОпераций.ОтключитьМеханизмРегистрацииОбъектов = Истина;
	//ПараметрыДлительныхОпераций.ОтключитьМеханизмРегистрацииОбъектовDWH = Истина;
	//ПараметрыДлительныхОпераций.ОтключитьОчередьЗаполненияЗначенийПоказателей = Истина;
	//ПараметрыДлительныхОпераций.ОтключитьРегистрациюДанныхДляНБКИ = Истина;
	//ПараметрыДлительныхОпераций.ПропуститьПроверкуЗапретаИзменения = Истина;
	//ПараметрыДлительныхОпераций.ПропуститьЗаписьВерсииОбъекта = Истина;
	//ПараметрыДлительныхОпераций.ВерсионированиеОбъектовКомментарийКВерсии = """";
	//ПараметрыДлительныхОпераций.НеРегистрироватьИзмененияПоУзлуМобУстройства = Истина;
	ПараметрыОбработкиДанных.Вставить(""ПараметрыДлительныхОпераций"", ПараметрыДлительныхОпераций);
	
	Возврат ПараметрыОбработкиДанных;
	
КонецФункции

Функция ИмяСобытия()
	Возврат СтрШаблон(""ВнешняяОбработка.%1"", Метаданные().Имя);
КонецФункции

Процедура ОбработкаДанных(ПараметрыОбработкиДанных)
	
	МаксимальноеКоличествоИтераций = ПараметрыОбработкиДанных.МаксимальноеКоличествоИтераций;
	
	Запрос = НовыйЗапрос(ПараметрыОбработкиДанных);
	
	СчетчикИтераций = 0;
	РезультатЗапроса = Запрос.Выполнить();
	
	Пока Не РезультатЗапроса.Пустой()
		И СчетчикИтераций < МаксимальноеКоличествоИтераций Цикл
		
		ОбработатьРезультатЗапроса(РезультатЗапроса, ПараметрыОбработкиДанных);
		
		СчетчикИтераций = СчетчикИтераций + 1;
		Запрос = НовыйЗапрос(ПараметрыОбработкиДанных);
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Механизм самоотключения
	Если РезультатЗапроса.Пустой() Тогда
		ДополнительныеОтчетыИОбработки.ОтключитьВнешнююОбработку(ПараметрыОбработкиДанных.Ссылка, 
			ПараметрыОбработкиДанных.Лог, ПараметрыОбработкиДанных.ИмяСобытия);
		УдалитьПрогрессИзХранилища(); // Прогресс
	КонецЕсли;
	
	ПараметрыОбработкиДанных.Лог.Информация(ИмяСобытия(), 
		СтрШаблон(""Обработка полностью выполнена за %1 итераций."", СчетчикИтераций));
	
КонецПроцедуры

Функция НовыйЗапрос(ПараметрыОбработкиДанных) 
	
	ТекстЗапроса = 
	""ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ЗП_ПЕРВЫЕ_ЗП КАК ЗП_ПЕРВЫЕ_ЗП,
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.СобиратьДанныеВЖР = ЛОЖЬ
	|	И &ЗП_ПродолжатьС_
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаписи,
	|	Ссылка"";
	СтроковыеФункцииКлиентСервер.ПодставитьЗаменяемоеПЕРВЫЕ(ТекстЗапроса, 
		ПараметрыОбработкиДанных.ОграничениеПорцииДанныхВЗапросе);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьОтборПоПрогрессу(Запрос, ПараметрыОбработкиДанных); // Прогресс
	
	Возврат Запрос;
	
КонецФункции

Процедура ОбработатьРезультатЗапроса(РезультатЗапроса, ПараметрыОбработкиДанных)
	
	Лог = ПараметрыОбработкиДанных.Лог;
	
	Лог.Информация(ИмяСобытия(), ""Обработка порции данных начата."");
	
	ВыборкаПорций = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Пока ВыборкаПорций.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ВыборкаДанных = ВыборкаПорций.Выбрать();
			
			Пока ВыборкаДанных.Следующий() Цикл
				ОбработатьТекущуюВыборку(ВыборкаДанных, ПараметрыОбработкиДанных);
				
				СохранитьПрогрессВХранилище(ВыборкаДанных.Ссылка); // Прогресс - Сохраняем последний документ на котором остановились
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
			Лог.Информация(ИмяСобытия(), 
				СтрШаблон(""Обработка порции данных завершена. Обработано %1 объектов."", ВыборкаДанных.Количество()));
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ОтменитьТранзакцию();
			
			Лог.Ошибка(ИмяСобытия(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		    ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьТекущуюВыборку(ВыборкаДанных, ПараметрыОбработкиДанных)
	
	Объект = ВыборкаДанных.Ссылка.ПолучитьОбъект();
	
	Попытка
		Объект.Заблокировать();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если Не ПараметрыОбработкиДанных.ПриОшибкеОбработкиОбъектаВызыватьИсключение Тогда
			// Пропускаем обработку объекта
			ПараметрыОбработкиДанных.Лог.Предупреждение(ИмяСобытия(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), 
				ВыборкаДанных.Ссылка);
			Возврат;
		Иначе
			// Прерываем всю обработку исключением
			ПараметрыОбработкиДанных.Лог.Ошибка(ИмяСобытия(), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), 
				ВыборкаДанных.Ссылка);
			ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
	КонецПопытки;
	
	// Реализовываем изменения объекта
	
	//...
	
	Если Объект.ПроверитьЗаполнение() Тогда
		
		ОбновлениеИнформационнойБазыЗаймы.НастроитьЗаписьОбъектаВДлительнойОперации(Объект, 
			ПараметрыОбработкиДанных.ПараметрыДлительныхОпераций);
		
		Объект.Записать();
	Иначе
		ПараметрыОбработкиДанных.Лог.Предупреждение(ИмяСобытия(), ""Проверка заполнения объекта не пройдена"", 
			ВыборкаДанных.Ссылка);
	КонецЕсли;
	
	Объект.Разблокировать();
	
КонецПроцедуры

#Область Прогресс

Функция КлючОбъекта()
	
	Возврат ИмяСобытия();
	
КонецФункции // КлючОбъекта()

Функция КлючНастроек()
	
	Возврат СтрШаблон(""%1.Прогресс"", Метаданные().Имя);
	
КонецФункции // КлючНастроек()

Функция ЗагрузитьПрогрессИзХранилища()
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта(), КлючНастроек());
	
КонецФункции // ЗагрузитьПрогрессИзХранилища()

Процедура СохранитьПрогрессВХранилище(Прогресс)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта(), КлючНастроек(), Прогресс);
	
КонецПроцедуры // СохранитьПрогрессВХранилище()

Процедура УдалитьПрогрессИзХранилища()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(КлючОбъекта(), КлючНастроек(), Неопределено);
	
КонецПроцедуры // УдалитьПрогрессИзХранилища()

Функция ПрогрессОбработкиДанных()
	
	Прогресс = ЗагрузитьПрогрессИзХранилища();
	
	Возврат Прогресс;
	
КонецФункции // ПрогрессОбработкиДанных()

Процедура УстановитьОтборПоПрогрессу(Запрос, ПараметрыОбработкиДанных)
	
	ГдеОстановились = ПрогрессОбработкиДанных();
	
	Если ЗначениеЗаполнено(ГдеОстановились) Тогда
		
		ПараметрыОбработкиДанных.Лог.Информация(ИмяСобытия(), СтрШаблон(""Обработка продолжается после %1."",ГдеОстановились));
		СтроковыеФункцииКлиентСервер.ПодставитьЗаменяемыйОтбор(Запрос.Текст, ""ЗП_ПродолжатьС_"", 
			""Ссылка > &ГдеОстановились"");
		Запрос.УстановитьПараметр(""ГдеОстановились"", ГдеОстановились);
		
	Иначе
		СтроковыеФункцииКлиентСервер.ПодставитьЗаменяемыйОтбор(Запрос.Текст, ""ЗП_ПродолжатьС_"", ""Истина"");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти"}
},
{0,
{"АСП",0,0,"АСП","РасчетКредитаСервер.ДоговорОформленСАСП(Договор);"}
},
{0,
{"НС",0,0,"НС","ПолученнаяСсылка = ОбновлениеИнформационнойБазыЗаймы.ПолучитьСсылкуИзНавигационной(""e1cib/data/Справочник.СтадииОбработкиОбъектов?ref=85e9f0670d3f992c11e4be76f00c7d72""); // возвращает СправочникСсылка.СтадииОбработкиОбъектов.ПолученыВЦО
Если ОбщегоНазначения.СсылкаСуществует(ПолученнаяСсылка) Тогда
"}
},
{5,
{"Тексты запросов",1,0,"",""},
{5,
{"Срез последних",1,0,"",""},
{0,
{"ПринадлежностьДоговоров.СрезПоследних()",0,0,"Срез[Последних.ПринадлежностьДоговоров]","ВЫБРАТЬ РАЗРЕШЕННЫЕ
	ПринадлежностьДоговоров.Период КАК Период,
	ПринадлежностьДоговоров.Договор КАК Договор,
	ПринадлежностьДоговоров.МФО КАК МФО,
	ПринадлежностьДоговоров.Организация КАК Организация
ПОМЕСТИТЬ ВТ_ПринадлежностьДоговоров
ИЗ
	РегистрСведений.ПринадлежностьДоговоров КАК ПринадлежностьДоговоров
ГДЕ
	ПринадлежностьДоговоров.Активность
	И ПринадлежностьДоговоров.Период <= &ТекущаяДата
	И ПринадлежностьДоговоров.Договор В(&МассивОбъектов)

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_ПринадлежностьДоговоров.Договор КАК Договор,
	ВТ_ПринадлежностьДоговоров.Договор.Владелец КАК Контрагент,
	ВТ_ПринадлежностьДоговоров.МФО КАК МФО,
	ВТ_ПринадлежностьДоговоров.Организация КАК Организация
ПОМЕСТИТЬ ВТ_ПринадлежностьДоговоровСрезПоследних
ИЗ
	ВТ_ПринадлежностьДоговоров КАК ВТ_ПринадлежностьДоговоров
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПринадлежностьДоговоров КАК ВТ_ПринадлежностьДоговоровПозднее
		ПО ВТ_ПринадлежностьДоговоров.Договор = ВТ_ПринадлежностьДоговоровПозднее.Договор
			И ВТ_ПринадлежностьДоговоров.Период < ВТ_ПринадлежностьДоговоровПозднее.Период
ГДЕ
	ВТ_ПринадлежностьДоговоровПозднее.Период ЕСТЬ NULL

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_ПринадлежностьДоговоров
;"}
},
{0,
{"СостояниеДоговоровЗайма.СрезПоследних()",0,0,"Срез[Последних:СостояниеДоговоровЗайма]","ВЫБРАТЬ РАЗРЕШЕННЫЕ
	СостояниеДоговоровЗайма.МоментВремени КАК МоментВремени,
	СостояниеДоговоровЗайма.Договор КАК Договор,
	СостояниеДоговоровЗайма.СостояниеДоговора КАК СостояниеДоговора
ПОМЕСТИТЬ ВТ_СостояниеДоговоровЗайма
ИЗ
	РегистрСведений.СостояниеДоговоровЗайма КАК СостояниеДоговоровЗайма
		СОЕДИНЕНИЕ Договоры КАК Договоры
		ПО СостояниеДоговоровЗайма.Договор = Договоры.Договор
ГДЕ
	СостояниеДоговоровЗайма.Период <= &Период
ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_СостояниеДоговоровЗайма.Договор КАК Договор,
	ВТ_СостояниеДоговоровЗайма.СостояниеДоговора КАК СостояниеДоговора
ПОМЕСТИТЬ ВТ_СостояниеДоговоровЗаймаСрезПоследних
ИЗ
	ВТ_СостояниеДоговоровЗайма КАК ВТ_СостояниеДоговоровЗайма
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостояниеДоговоровЗайма КАК ВТ_СостояниеДоговоровЗаймаПозднее
		ПО ВТ_СостояниеДоговоровЗайма.Договор = ВТ_СостояниеДоговоровЗаймаПозднее.Договор
			И ВТ_СостояниеДоговоровЗайма.МоментВремени < ВТ_СостояниеДоговоровЗаймаПозднее.МоментВремени
ГДЕ
	ВТ_СостояниеДоговоровЗаймаПозднее.МоментВремени ЕСТЬ NULL
ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_СостояниеДоговоровЗайма
;
"}
},
{0,
{"Действующие договоры",0,0,"","ВЫБРАТЬ РАЗРЕШЕННЫЕ
	СостояниеДоговоровЗайма.Договор КАК Договор,
	СостояниеДоговоровЗайма.Регистратор КАК Регистратор,
	СостояниеДоговоровЗайма.СостояниеДоговора КАК СостояниеДоговора
ПОМЕСТИТЬ ВТ_СостояниеДоговоровЗайма
ИЗ
	РегистрСведений.СостояниеДоговоровЗайма КАК СостояниеДоговоровЗайма
ГДЕ
	{Отбор по договорам}

ИНДЕКСИРОВАТЬ ПО
	Договор,
	СостояниеДоговора
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_СостояниеДоговоровЗайма.Договор КАК Договор,
	ВТ_СостояниеДоговоровЗайма.Регистратор КАК Регистратор
ПОМЕСТИТЬ ВТ_ЗаключенныеДоговоры
ИЗ
	ВТ_СостояниеДоговоровЗайма КАК ВТ_СостояниеДоговоровЗайма
ГДЕ
	ВТ_СостояниеДоговоровЗайма.СостояниеДоговора = ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ЗаключенДоговор)
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_ЗаключенныеДоговоры.Договор КАК Договор,
	ВТ_ЗаключенныеДоговоры.Регистратор КАК РегистраторЗаключения
ПОМЕСТИТЬ ВТ_НеЗакрытыеДоговоры
ИЗ
	ВТ_ЗаключенныеДоговоры КАК ВТ_ЗаключенныеДоговоры
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостояниеДоговоровЗайма КАК ЗакрытыеДоговоры
		ПО ВТ_ЗаключенныеДоговоры.Договор = ЗакрытыеДоговоры.Договор
			И (ЗакрытыеДоговоры.СостояниеДоговора В (ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорЗакрыт), ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорЗакрытСПереплатой), ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорПереоформлен)))
ГДЕ
	ЗакрытыеДоговоры.Договор ЕСТЬ NULL

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_ЗаключенныеДоговоры
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_СостояниеДоговоровЗайма
;
"}
},
{0,
{"СрезПоследних",0,0,"Срез","////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	<?""Имя регистра"", РегистрСведений>.<?""Измерение""> КАК <?""Измерение"">,
	<?""Имя регистра"", РегистрСведений>.<?""Ресурс""> КАК <?""Ресурс"">,
	<?""Имя регистра"", РегистрСведений>.<?""Поле периода"", ВыборВарианта, ""Период"", ""Период"", ""МоментВремени"", ""МоментВремени""> КАК <?""Поле периода"", ВыборВарианта, ""Период"", ""Период"", ""МоментВремени"", ""МоментВремени"">
ПОМЕСТИТЬ ВТ_<?""Имя регистра"", РегистрСведений>
ИЗ
	РегистрСведений.<?""Имя регистра"", РегистрСведений> КАК <?""Имя регистра"", РегистрСведений>
ГДЕ
	<?""Имя регистра"", РегистрСведений>.<?""Поле периода"", ВыборВарианта, ""Период"", ""Период"", ""МоментВремени"", ""МоментВремени""> <= &ТекущаяДата
ИНДЕКСИРОВАТЬ ПО
	<?""Измерение"">
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_<?""Имя регистра"", РегистрСведений>.<?""Измерение""> КАК <?""Измерение"">,
	ВТ_<?""Имя регистра"", РегистрСведений>.<?""Ресурс""> КАК <?""Ресурс"">
ПОМЕСТИТЬ ВТ_<?""Имя регистра"", РегистрСведений>Последние
ИЗ
	ВТ_<?""Имя регистра"", РегистрСведений> КАК ВТ_<?""Имя регистра"", РегистрСведений>
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_<?""Имя регистра"", РегистрСведений> КАК ВТ_<?""Имя регистра"", РегистрСведений>Позже
		ПО ВТ_<?""Имя регистра"", РегистрСведений>.<?""Измерение""> = ВТ_<?""Имя регистра"", РегистрСведений>Позже.<?""Измерение"">
			И ВТ_<?""Имя регистра"", РегистрСведений>.<?""Поле периода"", ВыборВарианта, ""Период"", ""Период"", ""МоментВремени"", ""МоментВремени""> < ВТ_<?""Имя регистра"", РегистрСведений>Позже.<?""Поле периода"", ВыборВарианта, ""Период"", ""Период"", ""МоментВремени"", ""МоментВремени"">
ГДЕ
	ВТ_<?""Имя регистра"", РегистрСведений>Позже.<?""Поле периода"", ВыборВарианта, ""Период"", ""Период"", ""МоментВремени"", ""МоментВремени""> ЕСТЬ NULL
ИНДЕКСИРОВАТЬ ПО
	<?""Измерение"">
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_<?""Имя регистра"", РегистрСведений>
;
"}
},
{0,
{"СрезКИ",0,0,"Срез","////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	<?""Справочник"", Справочник>КИ.Ссылка КАК Ссылка,
	<?""Справочник"", Справочник>КИ.Вид КАК Вид,
	<?""Справочник"", Справочник>КИ.Представление КАК Представление,
	<?""Справочник"", Справочник>КИ.ДействуетС КАК ДействуетС
ПОМЕСТИТЬ ВТ_<?""Справочник"", Справочник>КИ
ИЗ
	Справочник.<?""Справочник"", Справочник>.КонтактнаяИнформация КАК <?""Справочник"", Справочник>КИ
ГДЕ
	<?""Справочник"", Справочник>КИ.Период <= &ТекущаяДата
ИНДЕКСИРОВАТЬ ПО
	Ссылка
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_<?""Справочник"", Справочник>КИ.Ссылка КАК Ссылка,
	ВТ_<?""Справочник"", Справочник>КИ.Вид КАК Вид,
	ВТ_<?""Справочник"", Справочник>КИ.Представление КАК Представление
ПОМЕСТИТЬ ВТ_<?""Справочник"", Справочник>КИПоследние
ИЗ
	ВТ_<?""Справочник"", Справочник>КИ КАК ВТ_<?""Справочник"", Справочник>КИ
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_<?""Справочник"", Справочник>КИ КАК ВТ_<?""Справочник"", Справочник>КИПозже
		ПО ВТ_<?""Справочник"", Справочник>КИ.Ссылка = ВТ_<?""Справочник"", Справочник>КИПозже.Ссылка
			И ВТ_<?""Справочник"", Справочник>КИ.Вид = ВТ_<?""Справочник"", Справочник>КИПозже.Вид
			И ВТ_<?""Справочник"", Справочник>КИ.ДействуетС < ВТ_<?""Справочник"", Справочник>КИПозже.ДействуетС
ГДЕ
	ВТ_<?""Справочник"", Справочник>КИПозже.ДействуетС ЕСТЬ NULL
ИНДЕКСИРОВАТЬ ПО
	Ссылка
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_<?""Справочник"", Справочник>КИ
;
"}
}
},
{0,
{"Проценты остановлены",0,0,"","////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	РасчетыПоЗаймам.Договор КАК Договор
ПОМЕСТИТЬ ВТ_ДоговорыГдеПроцентыЕщеНачисляются
ИЗ
	РегистрНакопления.РасчетыПоЗаймам КАК РасчетыПоЗаймам
		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСВидамиЗаявлений КАК ДанныеСВидамиЗаявлений
		ПО СостояниеДоговоровЗайма.Договор = ДанныеСВидамиЗаявлений.Договор
ГДЕ
	РасчетыПоЗаймам.ВидНачислений = ЗНАЧЕНИЕ(Справочник.ВидыНачислений.Проценты)
	И РасчетыПоЗаймам.Период >= &НачалоВчерашнегоДня
	И РасчетыПоЗаймам.Регистратор ССЫЛКА Документ.НачислениеПоДоговору
	И РасчетыПоЗаймам.Активность

ИНДЕКСИРОВАТЬ ПО
	Договор
;
"}
},
{0,
{"Действующие договоры",0,0,"","ВЫБРАТЬ РАЗРЕШЕННЫЕ
	СостояниеДоговоровЗайма.Договор КАК Договор,
	СостояниеДоговоровЗайма.Регистратор КАК Регистратор,
	СостояниеДоговоровЗайма.СостояниеДоговора КАК СостояниеДоговора
ПОМЕСТИТЬ ВТ_СостояниеДоговоровЗайма
ИЗ
	РегистрСведений.СостояниеДоговоровЗайма КАК СостояниеДоговоровЗайма
ГДЕ
	И СостояниеДоговоровЗайма.Период <= &Период
	И &ЗП_ОтборПоДоговорам_

ИНДЕКСИРОВАТЬ ПО
	СостояниеДоговора
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорЗакрыт) КАК СостояниеДоговора
ПОМЕСТИТЬ ВТ_СостоянияЗакрытых

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорЗакрытСПереплатой)

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорПереоформлен)
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_СостояниеДоговоровЗайма.Договор КАК Договор
ПОМЕСТИТЬ ВТ_ЗакрытыеДоговоры
ИЗ
	ВТ_СостояниеДоговоровЗайма КАК ВТ_СостояниеДоговоровЗайма
		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостоянияЗакрытых КАК ВТ_СостоянияЗакрытых
		ПО ВТ_СостояниеДоговоровЗайма.СостояниеДоговора = ВТ_СостоянияЗакрытых.СостояниеДоговора

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_СостоянияЗакрытых
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_СостояниеДоговоровЗайма.Договор КАК Договор,
	ВТ_СостояниеДоговоровЗайма.Регистратор КАК Регистратор
ПОМЕСТИТЬ ВТ_ЗаключенныеДоговоры
ИЗ
	ВТ_СостояниеДоговоровЗайма КАК ВТ_СостояниеДоговоровЗайма
ГДЕ
	ВТ_СостояниеДоговоровЗайма.СостояниеДоговора = ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ЗаключенДоговор)
;


////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_СостояниеДоговоровЗайма
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_ЗаключенныеДоговоры.Договор КАК Договор,
	ВТ_ЗаключенныеДоговоры.Регистратор КАК РегистраторЗаключения
ПОМЕСТИТЬ ВТ_НеЗакрытыеДоговоры
ИЗ
	ВТ_ЗаключенныеДоговоры КАК ВТ_ЗаключенныеДоговоры
		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗакрытыеДоговоры КАК ВТ_ЗакрытыеДоговоры
		ПО ВТ_ЗаключенныеДоговоры.Договор = ВТ_ЗакрытыеДоговоры.Договор
ГДЕ
	ВТ_ЗакрытыеДоговоры.Договор ЕСТЬ NULL

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_ЗаключенныеДоговоры
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_ЗакрытыеДоговоры
;
"}
},
{0,
{"Не действующие договоры",0,0,"","ВЫБРАТЬ
	ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорЗакрыт) КАК СостояниеДоговора
ПОМЕСТИТЬ ВТ_СостоянияЗакрытых

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорЗакрытСПереплатой)

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ЗНАЧЕНИЕ(Справочник.СостоянияДоговораЗайма.ДоговорПереоформлен)
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	СостояниеДоговоровЗайма.Договор КАК Договор
ПОМЕСТИТЬ ВТ_НеДействующиеДоговоры
ИЗ
	РегистрСведений.СостояниеДоговоровЗайма КАК СостояниеДоговоровЗайма
		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СостоянияЗакрытых КАК ВТ_СостоянияЗакрытых
		ПО СостояниеДоговоровЗайма.СостояниеДоговора = ВТ_СостоянияЗакрытых.СостояниеДоговора
		ВНУТРЕННЕЕ СОЕДИНЕНИЕ _ТаблицаОтбора_ КАК _ТаблицаОтбора_
		ПО СостояниеДоговоровЗайма.Договор = _ТаблицаОтбора_.Договор

ИНДЕКСИРОВАТЬ ПО
	Договор
;

////////////////////////////////////////////////////////////////////////////////
УНИЧТОЖИТЬ ВТ_СостоянияЗакрытых
;
"}
},
{0,
{"РуководителиМФО",0,0,"ТБ[ЗапросРуководителиМФО]","////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ РАЗРЕШЕННЫЕ
	ОтветственныеЛицаСрезПоследних.Организация КАК Организация,
	ОтветственныеЛицаСрезПоследних.Должность КАК Должность,
	ОтветственныеЛицаСрезПоследних.ФизЛицо КАК ФизЛицо
ПОМЕСТИТЬ ВТ_РуководителиМФО
ИЗ
	РегистрСведений.ОтветственныеЛица.СрезПоследних(
			,
			Организация В
					(ВЫБРАТЬ
						ВТ_Договоры.МФО
					ИЗ
						ВТ_Договоры)
				И Вид = ЗНАЧЕНИЕ(Перечисление.ВидыОтветственныхЛиц.РуководительОрганизации)) КАК ОтветственныеЛицаСрезПоследних
;
"}
}
},
{1,
{"Транзакции",1,0,"",""},
{0,
{"Транзакция моя",0,0,"Тран[закция]","НачатьТранзакцию();

Попытка
	
	// .. Делаем что-то
	
	ЗафиксироватьТранзакцию();
Исключение
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	Сообщение = СтрШаблон(""По договору %1 ошибка: %2"", Выборка.ПредставлениеДоговора, ПодробноеПредставлениеОшибки);
	// СтандартныеПодсистемы.БазоваяФункциональность
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	ВызватьИсключение;
КонецПопытки;
"}
}
},
{0,
{"Изменение типового кода",0,0,"/","// Начало ЦФГ

// Конец ЦФГ"}
},
{0,
{"Применение кода БСП",0,0,"/","// СтандартныеПодсистемы.БазоваяФункциональность

// Конец СтандартныеПодсистемы.БазоваяФункциональность"}
},
{0,
{"Отбор СКД ТБ",0,0,"Отбор","БазовыеФункцииСистемыСервер.ДобавитьЭлементОтбораКомпоновкиДанных(КомпоновщикНаОтбор.Настройки.Отбор, ""Договор.Дата"", ПериодДоговоров.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);"}
},
{2,
{"Сообщения",1,0,"",""},
{0,
{"Сообщение в лог",0,0,"Лог","// Сработает только в отладочном режиме
СтруктураПараметров = Новый Структура(""ИмяСобытия, Источник"", ИмяСобытия, Источник);
КраткоеСообщениеОтладки = СтроковыеФункцииКлиентСервер.ЗначенияЭлементовКоллекции(СтруктураПараметров, ""ИмяСобытия, Источник"");
ОтладочныйРежимКлиентСервер.КраткоеСообщениеОтладки(КраткоеСообщениеОтладки); // Отладочный режим"}
},
{0,
{"Сообщение в ЖР",0,0,"Сооб[щить]","Лог = ЛогированиеСервер.КлиентЖурналРегистрации();
Лог.Информация(""Подсистема обработки данных.Обработать данные"", ""Начата обработка данных"");
Лог.Предупреждение
Лог.Ошибка
Лог.Примечание"}
}
},
{0,
{"ТекущаяДата",0,0,"Тек[ущаяДата]","ТБ_ОбщиеПроцедуры.ПолучитьТекущуюДату()"}
},
{0,
{"МФО Организации",0,0,"МФО[Организации]","МФО = ЗначенияПоУмолчаниюПовтИсп.МФООрганизации(стр.Договор.Организация);"}
},
{0,
{"Константы",0,0,"Конст[анты]","ЗначенияКонстантПовтИспСервер"}
},
{0,
{"ОбменДанными",0,0,"ОбменДанными","ОбъектПоСсылке.ОбменДанными.Загрузка = Истина;
ОбъектПоСсылке.ДополнительныеСвойства.Вставить(""ОтключитьМеханизмРегистрацииОбъектов""); 
ОбъектПоСсылке.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;"}
},
{1,
{"конкретные даты",1,0,"",""},
{0,
{"'20180701'",0,0,"'20180701'","ЗначенияКонстантПовтИспСервер.ДатаПереходаНаОплатуСтрахованияПоПоручениямПолучить()"}
}
},
{0,
{"РезультатЗапросаВСтруктуру",0,0,"Стр[уктура]","ДанныеСтруктура = Неопределено;
БазовыеФункцииСистемыСервер.ПеренестиРезультатЗапросаВСтруктуру(РезультатЗапроса, ДанныеСтруктура);"}
},
{0,
{"Право",0,0,"Прав[о]","БазовыеФункцииСистемыСервер.ПолучитьПраво(Метаданные.Роли)"}
},
{0,
{"ЗамерПроизводительности",0,1,"Замер[Производительности]","//В модуль формы элемента справочника

#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераЗапись;
// Конец СтандартныеПодсистемы.ОценкаПроизводительност

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// В начале процедуры
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаЗамераПроизводительности = ОценкаПроизводительности.НачатьЗамерВремени();
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	// В конце процедуры
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ВремяНачалаЗамераПроизводительности <> 0 Тогда
		ИдентификаторЗамераОткрытие = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, ПредопределенноеЗначение(""Справочник.КлючевыеОперации.ОткрытиеФормы<?""""Имя справочника""""""),
			ВремяНачалаЗамераПроизводительности);
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераОткрытие);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// В начале процедуры  
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ИдентификаторЗамераЗапись = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь,  ПредопределенноеЗначение(""Справочник.КлючевыеОперации.ЗаписьЭлементаСправочника<?""""Имя справочника"""">""));
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	
	// В конце процедуры
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамераЗапись);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

#КонецОбласти
"}
},
{0,
{"Сериализовать",0,0,"Сер[иализовать]","ТБ_ОбменыДаннымиСервер.СериализоватьJSON()
БазовыеФункцииСистемыСервер.СериализоватьОбъектXDTO()"}
},
{0,
{"ЭтоАСП",0,0,"ЭтоАСП","ЭтоАСП = РасчетКредитаСервер.ДоговорОформленСАСП("}
},
{0,
{"ФорматироватьДатуВСтруктуре",0,0,"","ФормированиеПечатныхФормСервер.ФорматироватьДатуВСтруктуре(ДанныеТекПользователя, ""ТекущийПользовательДоверенностьДата"");"}
}
}
}